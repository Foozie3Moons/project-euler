# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

=begin
  WANT:
  1. get triangle numbers
  2. cycle through each triangle number, obtaining the number of divisors for that number
  3. if the length of that array is greater than 500, print number
=end
require 'prime'

def get_triangle_number(num)
  sum = 0
  (1.upto(num)).each do |x|
    sum += x
  end
  return sum
end

def get_number_of_factors(num)
  prime_factors = num.prime_division
  powers = []
  prime_factors.each do |factor, power|
    powers.push power
  end
  number_of_factors = 1
  powers.each do |power|
    power += 1
    number_of_factors *= power
  end
  return number_of_factors
end


def do_it(num)
  start_time = Time.now()
  (1..Float::INFINITY).each do |number|
    triangle_number = get_triangle_number(number)
    if get_number_of_factors(triangle_number) >= num
      puts "Number: #{num}"
      puts "Triangle Number: #{triangle_number}"
      puts "Divisors: #{get_number_of_factors(triangle_number)}"
      puts "Took #{Time.now - start_time} seconds."
      break
    end
  end
end
do_it 500
